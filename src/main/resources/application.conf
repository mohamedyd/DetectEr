
data.BlackOak {
  clean-data-path = "/Users/visenger/research/datasets/BlackOak/Archive/groundDB.csv"
  dirty-data-path = "/Users/visenger/research/datasets/BlackOak/Archive/inputDB.csv"
}
dboost.BlackOak {
  result.dir = "/Users/visenger/research/datasets/BlackOak/Archive/outputDBoost-newHighliting.csv"
  result.hist = "/Users/visenger/research/datasets/BlackOak/Archive/hist-0.9-0.01-outputDBoost.txt"
  result.gaus = "/Users/visenger/research/datasets/BlackOak/Archive/gaussian1.5-output.txt"
}

dboost.small {
  clean.data = "/Users/visenger/research/datasets/BlackOak/Archive/small-groundDB.csv"
  dirty.data = "/Users/visenger/research/datasets/BlackOak/Archive/small-inputDB.csv"
  gold.log.folder = "/Users/visenger/research/datasets/BlackOak/Archive/gold-standard-small"
  gold.log.file = "/Users/visenger/research/datasets/BlackOak/Archive/gold-standard-small/gold-standard-small.txt"

}

trifacta {
  cleaning.result = "/Users/visenger/trifacta/inputDB_init/2016-11-30_11-20-20/inputDB-init.csv"
}

deduplication {
  # rule names shoud correspond to the nadeef clean path rules for udf (deduplication)
  rule.for.dirty.data = "dedupBlackOak1"
  rule.for.gold.data = "dedupBlackOakGold"
}

output {
  blackouak.goldstandard = "/Users/visenger/research/datasets/BlackOak/Archive/gold-standard"
  blackouak.goldstandard.file = "/Users/visenger/research/datasets/BlackOak/Archive/gold-standard/gold-standard.txt"

  dboost.gaus.result.folder = "/Users/visenger/research/datasets/BlackOak/Archive/dboost-gaus-detect-result"
  dboost.gaus.result.file = "/Users/visenger/research/datasets/BlackOak/Archive/dboost-gaus-detect-result/dboost-gaus-detect-result.txt"
  dboost.result.folder = "/Users/visenger/research/datasets/BlackOak/Archive/dboost-detect-result"
  dboost.result.file = "/Users/visenger/research/datasets/BlackOak/Archive/dboost-detect-result/dboost-detect-result.txt"

  trifacta.result.folder = "/Users/visenger/research/datasets/BlackOak/Archive/trifacta-detect-result"

  nadeef.detect.result.folder = "/Users/visenger/research/datasets/BlackOak/Archive/nadeef-detect-result"
  nadeef.detect.result.file = "/Users/visenger/research/datasets/BlackOak/Archive/nadeef-detect-result/nadeef-detect-result.txt"
}

dc.rules {
  path = "/Users/visenger/research/datasets/BlackOak/Archive/"
  file = "fds-modified.txt"
  noisy = ""

}

spark.config {
  local.ip = "spark.local.ip"
  local.ip.value = "192.168.253.138"

  driver.memory = "spark.driver.memory"
  driver.memory.value = "10g"

  executor.memory = "spark.executor.memory"
  executor.memory.value = "8g"
}

db.postgresql {
  url = "jdbc:postgresql://localhost:5432/unittest"
  user = "tester"
  password = "tester"
  driver = "org.postgresql.Driver"
}